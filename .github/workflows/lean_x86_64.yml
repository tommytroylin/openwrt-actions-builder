name: Lean_x86_64

on:
  schedule:
    - cron: "0 0 * * 5"

  push:
    branches:
      - master

  watch:
    types: [started]

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Phase 1
        uses: easimon/maximize-build-space@master
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"

      - name: Cleanup Phase 2
        run: |
          docker rmi `docker images -q` > /dev/null
          sudo -E apt-get -y purge ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* moby* snapd* > /dev/null
          sudo rm -rf /etc/mysql /etc/php  > /dev/null
          df -h

      - name: Prepare Build Env
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo -E apt-get update > /dev/null
          sudo -E apt-get -y full-upgrade > /dev/null
          sudo -E apt-get -y autoremove --purge > /dev/null
          sudo -E apt-get clean > /dev/null
          sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        uses: actions/checkout@main
        with:
          repository: coolsnowwolf/lede
          ref: "20221001"
          path: openwrt

      - name: Update & Install Feeds
        working-directory: ./openwrt
        run: |
          echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
          echo "src-git small https://github.com/kenzok8/small" >> ./feeds.conf.default
          chmod +x ./scripts/*
          ./scripts/feeds update -a > /dev/null
          ./scripts/feeds install -a > /dev/null

      - name: Configuration Customization
        working-directory: ./openwrt
        run: |
          mv ../customize.sh ./customize.sh
          chmod +x ./customize.sh 
          ./customize.sh

      - name: Configuration Apply
        env:
          CONFIG_FILE: "./lean/x86_64.config"
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          cd openwrt
          make defconfig > /dev/null

      - name: Download Packages
        working-directory: ./openwrt
        run: |
          make download -j$(nproc) > /dev/null
          find dl -size -1024c -exec ls -l {} \; > /dev/null
          find dl -size -1024c -exec rm -f {} \; > /dev/null

      - name: Build Firmware
        working-directory: ./openwrt
        run: |
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s
          # &>info.log || { echo "======== Last 200 Lines Of Build Log ========"; cat info.log | tail -n 200; exit 1; }

      - name: Prepare Firmware
        working-directory: ./openwrt
        run: |
          mkdir -p ./artifact/firmware
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/

      - name: Upload Firmware
        uses: actions/upload-artifact@master
        with:
          name: openWrt_firmware
          path: openwrt/artifact/firmware/

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
